// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Property {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  price       Int
  location    String
  bedrooms    Int      @default(0)
  bathrooms   Int      @default(0)
  area        Int      @default(0)
  parking     Int      @default(0)
  floor       Int?
  condoFee    Int?
  type        PropertyType
  transaction TransactionType
  status      PropertyStatus @default(AVAILABLE)
  featured    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamentos
  images      Image[]
  features    PropertyFeature[]
  contacts    Contact[]
  agent       Agent? @relation(fields: [agentId], references: [id])
  agentId     Int?

  @@map("properties")
}

model Image {
  id          Int      @id @default(autoincrement())
  url         String
  alt         String?
  type        ImageType @default(GALLERY)
  order       Int      @default(0)
  createdAt   DateTime @default(now())

  // Relacionamentos
  property    Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId  Int

  @@map("images")
}

model PropertyFeature {
  id          Int      @id @default(autoincrement())
  name        String
  createdAt   DateTime @default(now())

  // Relacionamentos
  property    Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId Int

  @@map("property_features")
}

model Contact {
  id          Int      @id @default(autoincrement())
  name        String
  email       String
  phone       String
  message     String
  subject     String?
  status      ContactStatus @default(UNREAD)
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamentos
  property    Property? @relation(fields: [propertyId], references: [id])
  propertyId  Int?

  @@map("contacts")
}

model Agent {
  id          Int      @id @default(autoincrement())
  name        String
  email       String
  phone       String
  creci       String
  bio         String?
  avatar      String?
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamentos
  properties  Property[]

  @@map("agents")
}

model User {
  id          Int      @id @default(autoincrement())
  email       String   @unique
  password    String
  name        String
  role        UserRole @default(ADMIN)
  active      Boolean  @default(true)
  lastLogin   DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("users")
}

model SiteConfig {
  id          Int      @id @default(autoincrement())
  key         String   @unique
  value       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("site_config")
}

// Enums
enum PropertyType {
  CASA
  APARTAMENTO
  COBERTURA
  TERRENO
  COMERCIAL
  RURAL
}

enum TransactionType {
  VENDA
  LOCACAO
  VENDA_LOCACAO
}

enum PropertyStatus {
  AVAILABLE
  SOLD
  RENTED
  DRAFT
}

enum ImageType {
  MAIN
  GALLERY
}

enum ContactStatus {
  UNREAD
  READ
  RESPONDED
  ARCHIVED
}

enum UserRole {
  ADMIN
  MANAGER
  AGENT
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}
